---
import Layout from "../../layouts/Layout.astro";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
    const entries = await getCollection("legendarium");
    return entries.map((entry) => {
        return {
            params: { slug: entry.id },
            props: { entry },
        };
    });
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<Layout>
    <Content />
    <div id="comments">
        <hr />
        <h3>Comments</h3>
        <p id="comment-status"></p>
    </div>
    <div class="form-container">
        <form id="comment-form" class="comment-form">
            <label for="fnickname">Nickname:</label>
            <input type="text" name="nickname" id="fnickname" required>
            <label for="fcomment">Message:</label>
            <textarea name="comment" id="fcomment" required></textarea>
            <input type="checkbox" name="send_via_magical_transport" value="1" style="display:none !important" tabindex="-1" autocomplete="off">
            <input class="form-submit" type="submit" value="Comment">
        </form>
        <div id="overlay">
            <img id="throbber" class="site-icon" src="/book-2.png" />
        </div>
    </div>
</Layout>

<script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
    import "https://code.jquery.com/jquery-3.7.1.js";

    const CURRENT_PATH = window.location.pathname;
    const SUPABASE_URL = "https://pdhlzmchhlsbnqenslqn.supabase.co";
    const PUBLIC_ANON_KEY =
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBkaGx6bWNoaGxzYm5xZW5zbHFuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk4MTcyNDAsImV4cCI6MjA1NTM5MzI0MH0.bK30uI9tJ-_YKH-a7jxt0vLvb_S2vnQd62R17nH5Kzc";

    // create supabase client
    const supabase = createClient(SUPABASE_URL, PUBLIC_ANON_KEY);

    const split = CURRENT_PATH.split("/");
    const id = split[split.length - 1];

    // query subapase db for moderated comments relevant to post
    const { data, error } = await supabase
        .from("comments")
        .select("*")
        .eq("post_id", id)
        .eq("moderated", true);

    // load comments into UI
    const $comments = $("#comments");
    const $commentStatus = $('#comment-status');
    if (error) {
        console.error("Error when getting post comments: ", error);
        $commentStatus.text('Error getting post comments...');
        $commentStatus.show();
    } else if (data && data.length > 0) {
        for (const comment of data) {
            const created = new Date(comment.created_at);
            const date = created.toLocaleDateString([], {
                dateStyle: "medium",
            });
            const time = created.toLocaleTimeString([], { timeStyle: "short" });
            const $comment = $(
                `<div class="comment"><header><span><strong>${comment.author}</strong></span><span>â€¢</span><span class="date">${date} at ${time}</span></header><p>${comment.body}</p></div>`,
            );
            $comments.append($comment);
        }
        $comments.css("visibility", "visible");
    } else {
        $commentStatus.text('Be the first to comment on this article!');
        $commentStatus.show();
    }

    // comment form submission
    const $form = $('#comment-form');
    $form.on('submit', async (e) => {
        e.preventDefault();

        const data = new FormData($form[0]);
        const postData = { author: '', body: '', post: id, bot: false };
        for (const [name, value] of data) {
            switch(name) {
                case 'nickname':
                    postData.author = value;
                    break;
                case 'comment':
                    postData.body = value;
                    break;
                case 'send_via_magical_transport':
                    postData.bot = true;
            }
        }

        const $formInputs = $('#comment-form :input');
        const $formOverlay = $('#overlay');
        $formInputs.prop('disabled', true);
        $formOverlay.css('display', 'flex');

        await fetch('https://pdhlzmchhlsbnqenslqn.supabase.co/functions/v1/post-new-comment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${PUBLIC_ANON_KEY}`
            },
            body: JSON.stringify(postData)
        });

        $('#comment-form').find('input[type="text"], textarea').val('');
        $formInputs.prop('disabled', false);
        $formOverlay.css('display', 'none');
    });
</script>

<style lang="scss">
    #comments {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    #comment-status {
        display: none;
    }

    .comment-form {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        max-width: 450px;
    }

    form .form-submit {
        color: var(--theme-light);
        background-color: var(--theme-primary-20);
        border-radius: 7px;
        padding: 3px;
    }

    form input,textarea {
        border: solid 1px var(--theme-surface-30);
        border-radius: 7px;
        padding: 3px;
    }

    .form-container {
        position: relative;
        display: flex;
        justify-content: center;
    }

    #overlay {
        position: absolute;
        display: none;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255,255,255,0.5);
        justify-content: center;
        align-items: center;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg) scale(1);
            animation-timing-function: ease-in;
        }
        60% {
            transform: rotate(900deg) scale(1.2);
            animation-timing-function: ease-out;
        }
        80% {
            transform: rotate(1080deg) scale(1);
        }
        100% {
            transform: rotate(1080deg);
        }
    }

    #throbber {
        animation: spin 1s infinite;
        opacity: 50%;
    }
</style>
