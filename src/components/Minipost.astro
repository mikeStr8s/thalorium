---
import {
    render,
    type InferEntrySchema,
    type RenderedContent,
} from "astro:content";

interface Props {
    post: {
        id: string;
        body?: string;
        collection: "legendarium";
        data: InferEntrySchema<"legendarium">;
        rendered?: RenderedContent;
        filePath?: string;
    };
    index: number;
    class: string;
}

const { class: className, post, index, ...rest } = Astro.props as Props;
const { Content } = await render(post);

const imgPattern = /<img[^>]*>/i;
const headerPattern = /<h1[^>]*>([a-zA-Z]+\s*)*<\/h1>/i;

const getFirstImage = () => {
    const match = post.rendered?.html.match(imgPattern);
    return match ? match[0] : null;
};

const getFirstHeader = () => {
    const match = post.rendered?.html.match(headerPattern);
    return match ? match[0] : null;
};

const getCleanedPost = () => {
    return post.rendered?.html
        .replace(imgPattern, "")
        .replace(headerPattern, "");
};
---

<article class={className} {...rest}>
    <Fragment set:html={getFirstHeader()} />
    <div class="crop">
        <Fragment set:html={getFirstImage()} />
    </div>
    <div class="content"><Fragment set:html={getCleanedPost()} /></div>
    <div class="mini-bar">
        <mini-post-date class="mini-post-date" data-date={post.data.created}>
            <span class="date"></span>
        </mini-post-date>
        <a class="button" href={"/legendarium/" + post.id}
            ><span class="material-symbols-outlined">read_more</span>Read more</a
        >
    </div>
</article>

<script>
    class MiniPostDate extends HTMLElement {
        connectedCallback() {
            const date = new Date(this.dataset.date as string);
            const span = this.querySelector(".date");

            if (span) {
                span.innerHTML = this.getPostDate(date);
            }
        }

        getPostDate(date: Date): string {
            const now = new Date();
            const diffInSeconds = Math.floor(
                (now.getTime() - date.getTime()) / 1000,
            );

            if (diffInSeconds < 60) {
                return "less than a minute ago";
            } else if (diffInSeconds < 300) {
                // 5 minutes = 300 seconds
                return "a few minutes ago";
            } else if (diffInSeconds < 3600) {
                // 1 hour = 3600 seconds
                const minutes = Math.floor(diffInSeconds / 60);
                return `${minutes} minute${minutes > 1 ? "s" : ""} ago`;
            } else if (diffInSeconds < 86400) {
                // 24 hours = 86400 seconds
                const hours = Math.floor(diffInSeconds / 3600);
                return `${hours} hour${hours > 1 ? "" : ""} ago`;
            } else if (diffInSeconds < 172800) {
                // 48 hours = 172800 seconds
                const time = date.toLocaleTimeString([], {
                    timeStyle: "short",
                });
                return `Yesterday at ${time}`;
            } else {
                return `${date.toLocaleDateString([], { dateStyle: "medium" })}`;
            }
        }
    }

    customElements.define("mini-post-date", MiniPostDate);
</script>

<style lang="scss">
    h3 {
        padding-bottom: 15px;
    }

    .mini-post {
        border-radius: 10px;
        padding: 10px;
        margin-top: 15px;
        background-color: var(--theme-surface-0);

        a {
            text-decoration: none;
            display: flex;
            gap: 5px;
            border-radius: 7px;
            padding: 5px;
            color: var(--theme-light);
            background-color: var(--theme-primary-20);
        }
    }

    .content {
        max-height: 100px;
        overflow-y: hidden;
        mask-image: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 1) 75%,
            rgba(255, 255, 255, 0)
        );
    }

    .mini-bar {
        display: flex;
        flex-direction: row;
        justify-content: space-between;

        padding-top: 10px;
    }

    .mini-post-date {
        display: flex;
        align-items: center;
    }

    .date {
        font-weight: 600;
    }

    .crop {
        width: 100%;
        max-height: 150px;
        overflow: hidden;
    }
</style>
